#!/bin/bash

set -eo pipefail

ARGS=$(getopt -s bash -o hskv: --longoptions help,no-systemd,no-kernels,ve-path -n "$(basename "$0")" -- "$@")

usage () {
    echo "usage: $(basename "$0") [-v|--ve-path] [-s|--no-systemd] [-k|--no-kernels] [--help]"
    exit 1
}

eval set -- "$ARGS"

DEFAULT_VE_DIR=~/.venv/notebooks
VE_PATH=''
NO_SYSTEMD=''
NO_KERNELS=''
while true; do
    case "$1" in
	-h | --help) usage;;
    -v | --ve-path) VE_PATH="$2"; shift 2; break;;
    -s | --no-systemd) NO_SYSTEMD="1"; shift; break;;
    -k | --no-kernels) NO_KERNELS="1"; shift; break;;
	-- ) shift; break;;
	* ) echo "$1"; break;;
    esac
done

set -u

function find_envs {
    (cd "$DEFAULT_VE_DIR"; find . -maxdepth 1 -mindepth 1 -type d -printf '%P\n')
}

if [[ -z "$VE_PATH" ]]; then
    if [[ ! -d "$DEFAULT_VE_DIR" ]]; then
        echo "Error: Default ve dir does not exist: $DEFAULT_VE_DIR"
        echo "       Please make before continuing"
        exit 1
    fi
    if [[ $(find_envs | wc -l) == 0 ]]; then
       VE_PATH="$DEFAULT_VE_DIR/1"
    else
        LAST_ENV=$(find_envs | sort -nr | head -1)
        VE_PATH="$DEFAULT_VE_DIR/$(( "$LAST_ENV" + 1 ))"
    fi
fi

if [[ -z "$VE_PATH" ]]; then
    echo "Error: no ve path specified"
    exit 1
elif [[ -d "$VE_PATH" ]]; then
    echo "Error: $VE_PATH exists, remove and rerun"
    exit 1
fi

echo "Creating venv at $VE_PATH"

REPO_DIR="$(realpath "$(dirname "$(readlink -f "$0")")/..")"

python -m venv "$VE_PATH"
# shellcheck disable=SC1091
source "$VE_PATH/bin/activate"

pip install nodeenv
nodeenv --python-virtualenv
pip install -r "$REPO_DIR/etc/notebook-requirements.txt"
